basePath: /mc-net
definitions:
  handlers.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.MyUser'
        type: array
    type: object
  handlers.PatchUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.PatchUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.TfVarsVPNTunnels:
    properties:
      my-imported-aws-subnet-id:
        type: string
      my-imported-aws-vpc-id:
        type: string
      my-imported-gcp-subnet-name:
        type: string
      my-imported-gcp-vpc-name:
        type: string
    type: object
  handlers.TofuConfigVPNTunnelsRequest:
    properties:
      namespaceId:
        type: string
      tfVars:
        $ref: '#/definitions/handlers.TfVarsVPNTunnels'
    type: object
  handlers.TofuInitRequest:
    properties:
      namespaceId:
        type: string
    type: object
  handlers.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  handlers.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.MyUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Response:
    properties:
      success:
        example: true
        type: boolean
      text:
        example: Any text
        type: string
    type: object
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: POC-MC-Net-TF REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: POC-MC-Net-TF REST API
  version: latest
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Check API server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.Response'
      summary: Check API server is running
      tags:
      - '[System] Utility'
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Check HTTP version of incoming request
      tags:
      - '[System] Utility'
  /sample/users:
    get:
      consumes:
      - application/json
      description: Get information of all users.
      produces:
      - application/json
      responses:
        "200":
          description: (sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/handlers.GetUsersResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get a list of users
      tags:
      - '[Sample] Users'
    post:
      consumes:
      - application/json
      description: Create a new user with the given information.
      parameters:
      - description: User information
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/handlers.GetUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Create a new user
      tags:
      - '[Sample] Users'
  /sample/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deletion successful
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Delete a user
      tags:
      - '[Sample] Users'
    get:
      consumes:
      - application/json
      description: Get information of a user with a specific ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/handlers.GetUserResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get specific user information
      tags:
      - '[Sample] Users'
    patch:
      consumes:
      - application/json
      description: Patch a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/handlers.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/handlers.PatchUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Patch a user
      tags:
      - '[Sample] Users'
    put:
      consumes:
      - application/json
      description: Update a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/handlers.UpdateUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Update a user
      tags:
      - '[Sample] Users'
  /tofu/config/vpn-tunnels:
    post:
      consumes:
      - application/json
      description: Create configurations for VPN tunnels
      parameters:
      - description: Create configurations for VPN tunnels
        in: body
        name: ConfigVPNTunnels
        required: true
        schema:
          $ref: '#/definitions/handlers.TofuConfigVPNTunnelsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create configurations for VPN tunnels
      tags:
      - '[Tofu] Commands'
  /tofu/init:
    post:
      consumes:
      - application/json
      description: Prepare your working directory for other commands
      parameters:
      - description: TofuInitRequest
        in: body
        name: TofuInitRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.TofuInitRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.Response'
      summary: Prepare your working directory for other commands
      tags:
      - '[Tofu] Commands'
  /tofu/show/{namespaceId}:
    get:
      consumes:
      - application/json
      description: Show the current state of a saved plan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.Response'
      summary: Show the current state of a saved plan
      tags:
      - '[Tofu] Commands'
  /tofu/version:
    get:
      consumes:
      - application/json
      description: Check Tofu version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.Response'
      summary: Check Tofu version
      tags:
      - '[Tofu] Commands'
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
